Predefined Functional Interface:-
       
java.util.function package:-

1 java.util.function.Function<T,R>
2 java.util.function.Predicate<T>
3 java.util.function.Consumer<T>
4 java.util.function.Suppiler<T>
5 java.util.function.Bifunction<T,U,R>
6 java.util.function.BinaryOperator<T>

   Interface                       Abstract Methods                     
 =============                  =====================
1 Function<T,R>                     R apply(T t);
2 Predicate<T>                      boolean test(T ,t);
3 Consumer<T>                       void accept(T ,t);
4 Suppiler<T>                       T get();
5 Bifunction<T,U,R>                 R apply(T t,U u);
6 BinaryOperator<T>                 T apply(T t1, T t2);


1) Interface Function<T,R>
Type Parameters:
T - the type of the input to the function
R - the type of the result of the function

This is a functional interface and can therefore be used as the assignment target for a lambda expression or method reference.
@FunctionalInterface
public interface Function<T,R>
Represents a function that accepts one argument and produces a result.
This is a functional interface whose functional method is apply(Object).

2) Interface Predicate<T>
Type Parameters:

T - the type of the input to the predicate
Functional Interface:
This is a functional interface and can therefore be used as the assignment target
for a lambda expression or method reference.
@FunctionalInterface
public interface Predicate<T>
Represents a predicate (boolean-valued function) of one argument.
This is a functional interface whose functional method is test(Object).